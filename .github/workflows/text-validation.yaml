# Text Validation Workflow
# Checks capitalization of keywords and other text formatting rules in PR files

name: Text Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'documentation/CAMARA-API-Event-Subscription-and-Notification-Guide.md'
      - 'documentation/CAMARA-API-Design-Guide.md'

jobs:
  text-validation:
    runs-on: ubuntu-latest
    name: Validate Text Formatting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          documentation/CAMARA-API-Event-Subscription-and-Notification-Guide.md
          documentation/CAMARA-API-Design-Guide.md

    - name: Setup Python
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Create validation script
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        cat > validate_text.py << 'EOF'
        #!/usr/bin/env python3
        # ... (script content unchanged)
        EOF

    - name: Run text validation
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        python validate_text.py ${{ steps.changed-files.outputs.all_changed_files }}

    - name: Comment on PR (if issues found)
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Create a comment with validation results
          const comment = `## 📝 Text Validation Results
          
          Some text formatting issues were found in your PR. Please review and fix the following:
          
          **Common issues to check:**
          - Ensure technical terms are properly capitalized (e.g., "GitHub" not "github")
          - Remove trailing whitespace from lines  
          - Use single spaces between words
          - Check for consistent formatting
          
          Please run the validation locally or check the workflow logs for detailed information about specific issues.
          
          ---
          *This comment was automatically generated by the Text Validation workflow.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Optional: Auto-fix some common issues
  # The following auto-fix job is commented out to avoid duplication and accidental execution.
  # If you want to enable auto-fix later, simply uncomment the lines below.

  # auto-fix:
  #   runs-on: ubuntu-latest
  #   name: Auto-fix Text Issues
  #   if: github.event_name == 'pull_request'
  #   needs: text-validation
  #   # Only run if text-validation failed and this is enabled
  #   # Remove the 'if: false' line below to enable auto-fixing
  #   if: false
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       fetch-depth: 0
  #
  #   - name: Get changed files
  #     id: changed-files
  #     uses: tj-actions/changed-files@v40
  #     with:
  #       files: |
  #         **/*.md
  #         **/*.txt
  #         **/*.rst
  #         **/*.mdx
  #         docs/**
  #         README*
  #
  #   - name: Auto-fix common issues
  #     if: steps.changed-files.outputs.any_changed == 'true'
  #     run: |
  #       # Create a simple auto-fix script
  #       cat > auto_fix.py << 'EOF'
  #       import re
  #       import sys
  #       
  #       # Simple fixes that are safe to automate
  #       SAFE_FIXES = {
  #           r'\bgithub\b': 'GitHub',
  #           r'\bjavascript\b': 'JavaScript',
  #           r'\btypescript\b': 'TypeScript',
  #           r'\bapi\b': 'API',
  #           r'\bapis\b': 'APIs',
  #           r'\bjson\b': 'JSON',
  #           r' +$': '',  # Remove trailing whitespace
  #       }
  #       
  #       for filepath in sys.argv[1:]:
  #           try:
  #               with open(filepath, 'r') as f:
  #                   content = f.read()
  #               
  #               original_content = content
  #               for pattern, replacement in SAFE_FIXES.items():
  #                   content = re.sub(pattern, replacement, content, flags=re.IGNORECASE if pattern != r' +$' else 0)
  #               
  #               if content != original_content:
  #                   with open(filepath, 'w') as f:
  #                       f.write(content)
  #                   print(f"Fixed issues in {filepath}")
  #           except Exception as e:
  #               print(f"Error processing {filepath}: {e}")
  #       EOF
  #       
  #       python auto_fix.py ${{ steps.changed-files.outputs.all_changed_files }}
  #
  #   - name: Commit auto-fixes
  #     run: |
  #       git config --local user.email "action@github.com"
  #       git config --local user.name "GitHub Action"
  #       git add .
  #       if ! git diff --cached --quiet; then
  #         git commit -m "Auto-fix text formatting issues"
  #         git push
  #       fi
